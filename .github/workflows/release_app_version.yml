name: Flutter Multi-Platform Release & Version Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to set in pubspec.yaml'
        required: true
        type: string
      min_version:
        description: 'Minimum version required (optional)'
        required: false
        type: string
      updates:
        description: 'Description of updates in this version'
        required: true
        type: string

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods

      - name: Install npm
        run: |
          brew install node

      - name: Clean up CocoaPods files before install
        run: |
          rm -f ios/Podfile.lock
          rm -rf ios/Pods
          echo "Cleaned Podfile.lock and Pods directory."

      - name: Install dependencies
        run: |
          flutter pub get
          pod install --project-directory=ios --repo-update

      - name: Update pubspec.yaml version
        run: |
          sed -i '' "s/^version: .*/version: ${{ github.event.inputs.version }}/" pubspec.yaml

      - name: Build Flutter APK (Android)
        run: flutter build apk --debug

      - name: Build Flutter IPA (iOS)
        run: flutter build ios --debug

      - name: Build Flutter Web
        run: flutter build web --debug

      - name: Update ReleaseHistory.md with new version and updates
        run: |
          SECTION_HEADER="## Release History"
          ENTRY="- Version ${{ github.event.inputs.version }}: ${{ github.event.inputs.updates }}"
          if [ ! -f ReleaseHistory.md ]; then
            echo -e "$SECTION_HEADER\n$ENTRY" > ReleaseHistory.md
          elif ! grep -q "$SECTION_HEADER" ReleaseHistory.md; then
            echo -e "\n$SECTION_HEADER\n$ENTRY" >> ReleaseHistory.md
          else
            awk -v entry="$ENTRY" -v header="$SECTION_HEADER" '
              BEGIN {added=0}
              {print}
              $0==header && !added {print entry; added=1}
            ' ReleaseHistory.md > ReleaseHistory.tmp && mv ReleaseHistory.tmp ReleaseHistory.md
          fi

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add pubspec.yaml ReleaseHistory.md
          git commit -m "Release version ${{ github.event.inputs.version }}: ${{ github.event.inputs.updates }}"
          git push origin master

      - name: Get latest commit hash
        id: get_commit
        run: echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Update ReleaseHistory.md with commit hash and updates list
        run: |
          SECTION_HEADER="## Release History"
          COMMIT_HASH="${{ env.commit_hash }}"
          RAW_VERSION="${{ github.event.inputs.version }}"
          # Remove build metadata (+...) from version
          VERSION=$(echo "$RAW_VERSION" | cut -d'+' -f1)
          UPDATES="${{ github.event.inputs.updates }}"
          # Split updates on '||', trim whitespace, and format as markdown list
          UPDATE_LIST=""
          IFS='||' read -ra UPDATE_ITEMS <<< "$UPDATES"
          for item in "${UPDATE_ITEMS[@]}"; do
            TRIMMED_ITEM=$(echo "$item" | xargs)
            if [ -n "$TRIMMED_ITEM" ]; then
              UPDATE_LIST+="  - $TRIMMED_ITEM\n"
            fi
          done
          ENTRY="- Version $VERSION (Commit: $COMMIT_HASH)\n$UPDATE_LIST"
          if [ ! -f ReleaseHistory.md ]; then
            echo -e "$SECTION_HEADER\n$ENTRY" > ReleaseHistory.md
          elif ! grep -q "$SECTION_HEADER" ReleaseHistory.md; then
            echo -e "\n$SECTION_HEADER\n$ENTRY" >> ReleaseHistory.md
          else
            awk -v entry="$ENTRY" -v header="$SECTION_HEADER" '
              BEGIN {added=0}
              {print}
              $0==header && !added {print entry; added=1}
            ' ReleaseHistory.md > ReleaseHistory.tmp && mv ReleaseHistory.tmp ReleaseHistory.md
          fi
          git add ReleaseHistory.md
          git commit -m "Update ReleaseHistory.md with commit hash and updates list for version $VERSION"
          git push origin master

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Update Firebase RemoteConfig
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo '{
            "parameters": {
              "latest_version": {
                "defaultValue": { "value": "${{ github.event.inputs.version }}" }
              },
              "min_version": {
                "defaultValue": { "value": "${{ github.event.inputs.min_version || github.event.inputs.version }}" }
              }
            }
          }' > remoteconfig.json
          firebase remoteconfig:template:publish --project <your-firebase-project-id> --file remoteconfig.json --token "$FIREBASE_TOKEN"
